import asyncio
import aiosqlite
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime
import os

TOKEN = os.getenv("BOT_TOKEN")  # üîê —Ç–æ–∫–µ–Ω –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤ Render ENV vars

bot = Bot(token=TOKEN)
dp = Dispatcher()

# === –ö–Ω–æ–ø–∫–∏ ===
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ"), KeyboardButton(text="üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ")],
        [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]
    ],
    resize_keyboard=True
)

# === –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã ===
async def init_db():
    async with aiosqlite.connect("money.db") as db:
        await db.execute("""
        CREATE TABLE IF NOT EXISTS records (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            type TEXT,
            amount REAL,
            date TEXT
        )""")
        await db.commit()

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫ üíº", reply_markup=main_kb)

@dp.message(lambda msg: msg.text in ["üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ", "üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ"])
async def choose_type(message: types.Message):
    t = "income" if message.text == "üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ" else "expense"
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É ({'–¥–æ—Ö–æ–¥' if t=='income' else '—Ä–∞—Å—Ö–æ–¥'}):")
    dp["last_type"] = t  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –≤—Ä–µ–º–µ–Ω–Ω–æ

@dp.message(lambda msg: msg.text.replace('.', '', 1).isdigit())
async def add_record(message: types.Message):
    if "last_type" not in dp:
        return await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–ª–∏ üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ.")
    amount = float(message.text)
    t = dp["last_type"]
    date = datetime.now().strftime("%Y-%m-%d")

    async with aiosqlite.connect("money.db") as db:
        await db.execute("INSERT INTO records (type, amount, date) VALUES (?, ?, ?)", (t, amount, date))
        await db.commit()

    if t == "income":
        await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: –∑–∞—Ä–∞–±–æ—Ç–∞–ª {amount} z≈Ç")
    else:
        await message.answer(f"üí∏ –î–æ–±–∞–≤–ª–µ–Ω–æ: –ø–æ—Ç—Ä–∞—Ç–∏–ª {amount} z≈Ç")

    dp.pop("last_type")

@dp.message(lambda msg: msg.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def stats(message: types.Message):
    async with aiosqlite.connect("money.db") as db:
        async with db.execute("SELECT type, SUM(amount) FROM records GROUP BY type") as cursor:
            data = await cursor.fetchall()

    income = next((d[1] for d in data if d[0] == "income"), 0)
    expense = next((d[1] for d in data if d[0] == "expense"), 0)
    balance = (income or 0) - (expense or 0)

    text = (f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {income:.2f} z≈Ç\n"
            f"üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {expense:.2f} z≈Ç\n"
            f"üíµ –ë–∞–ª–∞–Ω—Å: {balance:.2f} z≈Ç")
    await message.answer(text)

async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
